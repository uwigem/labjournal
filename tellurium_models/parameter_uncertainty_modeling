#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 24 19:10:41 2018

@author: zackmcnulty
"""
# -*- coding: utf-8 -*-
# Dallas Warren
# Washington iGEM - Simulations
# Model of chemically induced dimerization.
# Nanobody kinetic rates based on antibody kinetic rates.
# Nanobody concentrations based on a protein's average concentration in cell.
# Molecule concentration as an arbitrary number.
# Gene kinetic rates and concentrations fudged.
"""
Tellurium oscillation
"""
import tellurium as te
import roadrunner
import antimony

r = te.loada ('''
model feedback()
  // Reactions:
  J0: Nan1 + Mol -> Nan1Mol; (K1*Nan1*Mol);
  J1: Nan1Mol -> Nan1 + Mol; (K_1*Nan1Mol); 
  J2: Nan1Mol + Nan2 -> Nan1MolNan2; (K2*Nan1Mol*Nan2)
  J3: Nan1MolNan2 + GeneOff -> GeneOn; (K3*Nan1MolNan2*GeneOff);
  //J4: GeneOn -> Nan1MolNan2 + GeneOff; (K_3*GeneOn);

  // Species initializations:
  Nan1 = 0.0001692; 
  Mol = 0.0001692/2; 
  Nan2 = 0.0001692; 
  Nan1Mol = 0;
  Nan1MolNan2 = 0; 
  GeneOff = 5*10^-5; 
  GeneOn = 0;

  // Variable initialization:
  K1 = 6.1*10^5; 
  K_1 = 8*10^-5; 
  K2 = 3.3*10^5; 
  K3 = 1*10^5; 
  K_3 = 0;
end''')

result = r.simulate(0, .5, 1000)
r.plot(result)
plt.figure(1)
plt.plot(result[:,0],result[:,1:8])
#plt.plot(result[:,0],result[:,5])
#plt.plot(result[:,0],result[:,6])
plt.legend(["Anchor binder", "Molecule", "Complex", "Dimerization binder", "Dimer", "GeneOn", "GeneOff"])
plt.xlabel("Time (minutes)")
plt.ylabel("Concentration")
r.draw()
"""
Tellurium oscillation
"""
import tellurium as te
import roadrunner
import antimony

r = te.loada ('''
model feedback()
  // Reactions:
  J0: Nan1 + Mol -> Nan1Mol; (K1*Nan1*Mol);
  J1: Nan1Mol -> Nan1 + Mol; (K_1*Nan1Mol); 
  J2: Nan1Mol + Nan2 -> Nan1MolNan2; (K2*Nan1Mol*Nan2)
  J3: Nan1MolNan2 + GeneOff -> GeneOn; (K3*Nan1MolNan2*GeneOff);
  //J4: GeneOn -> Nan1MolNan2 + GeneOff; (K_3*GeneOn);

  // Species initializations:
  Nan1 = 0.0001692; 
  Mol = 0.0001692/2; 
  Nan2 = 0.0001692; 
  Nan1Mol = 0;
  Nan1MolNan2 = 0; 
  GeneOff = 5*10^-5; 
  GeneOn = 0;

  // Variable initialization:
  K1 = 6.1*10^5; 
  K_1 = 8*10^-5; 
  K2 = 3.3*10^5; 
  K3 = 1*10^5; 
  K_3 = 0;
end''')

result = r.simulate(0, .5, 1000)
r.plot(result)
plt.figure(1)
plt.plot(result[:,0],result[:,1:8])
#plt.plot(result[:,0],result[:,5])
#plt.plot(result[:,0],result[:,6])
plt.legend(["Anchor binder", "Molecule", "Complex", "Dimerization binder", "Dimer", "GeneOn", "GeneOff"])
plt.xlabel("Time (minutes)")
plt.ylabel("Concentration")
r.draw()